{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creates the AWS resources required by the MediaPipeline",

    "Parameters": {
        "S3BucketName": {
            "Type": "String"
        },
        "S3ArchivePrefix": {
            "Type": "String"
        },
        "S3InputPrefix": {
            "Type": "String"
        },
        "S3OutputPrefix": {
            "Type": "String"
        },
        "S3CoverArtPrefix": {
            "Type":"String"
        },
        "DDBFileTable": {
            "Type": "String"
        },
        "DDBArchiveTable": {
            "Type": "String"
        },
        "DDBProcessingStatsTable": {
            "Type": "String"
        },
        "TranscodeQueueName": {
            "Type": "String"
        },
        "ID3TagQueueName": {
            "Type": "String"
        },
        "TranscodeTopicName": {
            "Type": "String"
        },
        "AutoScaleTranscodeQueueLength": {
            "Type": "Number"
        },
        "KeyName": {
            "Type": "String"
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {"image": "ami-864d84ee"},
            "us-west-2": {"image": "ami-e7b8c0d7"}
        },
        "Region2AZ" : {
            "us-west-2" : { "AZ" : ["us-west-2a", "us-west-2b", "us-west-2c"] },
            "us-east-1" : { "AZ" : ["us-east-1a", "us-east-1b", "us-east-1c"] }
        }
    },
    "Resources": {
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Ref": "S3BucketName"
                },
                "LifecycleConfiguration": {
                    "Rules": [
                        {
                            "Id": "RAR archive lifecycle",
                            "Prefix": "archive/",
                            "Status": "Enabled",
                            "Transition": {
                                "StorageClass": "Glacier",
                                "TransitionInDays": "30"
                            }
                        }
                    ]
                }
            }
        },
        "MediaFileTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": {
                    "Ref": "DDBFileTable"
                },
                "AttributeDefinitions": [
                    {
                        "AttributeName": "local_file_path",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "local_dir",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "transcode_input_key",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "tagged_output_key",
                        "AttributeType": "S"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "2",
                    "WriteCapacityUnits": "2"
                },
                "KeySchema": [
                    {
                        "AttributeName": "local_file_path",
                        "KeyType": "HASH"
                    }
                ],
                "GlobalSecondaryIndexes": [
                    {
                        "IndexName": "idx_local_dir",
                        "KeySchema": [
                            {
                                "AttributeName": "local_dir",
                                "KeyType": "HASH"
                            }
                        ],
                        "Projection": {
                            "ProjectionType": "KEYS_ONLY"
                        },
                        "ProvisionedThroughput": {
                            "ReadCapacityUnits": "2",
                            "WriteCapacityUnits": "2"
                        }
                    },
                    {
                        "IndexName": "idx_transcode_input_key",
                        "KeySchema": [
                            {
                                "AttributeName": "transcode_input_key",
                                "KeyType": "HASH"
                            }
                        ],
                        "Projection": {
                            "ProjectionType": "KEYS_ONLY"
                        },
                        "ProvisionedThroughput": {
                            "ReadCapacityUnits": "2",
                            "WriteCapacityUnits": "2"
                        }
                    },
                    {
                        "IndexName": "idx_tagged_output_key",
                        "KeySchema": [
                            {
                                "AttributeName": "tagged_output_key",
                                "KeyType": "HASH"
                            }
                        ],
                        "Projection": {
                            "NonKeyAttributes": ["artist", "album"],
                            "ProjectionType": "INCLUDE"
                        },
                        "ProvisionedThroughput": {
                            "ReadCapacityUnits": "2",
                            "WriteCapacityUnits": "2"
                        }
                    }
                ]
            }
        },
        "MediaArchiveTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": {
                    "Ref": "DDBArchiveTable"
                },
                "AttributeDefinitions": [
                    {
                        "AttributeName": "local_dir",
                        "AttributeType": "S"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "1",
                    "WriteCapacityUnits": "1"
                },
                "KeySchema": [
                    {
                        "AttributeName": "local_dir",
                        "KeyType": "HASH"
                    }
                ]
            }
        },
        "MediaProcessingStatsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": {
                    "Ref": "DDBProcessingStatsTable"
                },
                "AttributeDefinitions": [
                    {
                        "AttributeName": "local_dir",
                        "AttributeType": "S"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "1",
                    "WriteCapacityUnits": "1"
                },
                "KeySchema": [
                    {
                        "AttributeName": "local_dir",
                        "KeyType": "HASH"
                    }
                ]
            }
        },
        "TranscodeQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
                "QueueName": {
                    "Ref": "TranscodeQueueName"
                }
            }
        },
        "ID3TagQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
                "QueueName": {
                    "Ref": "ID3TagQueueName"
                }
            }
        },
        "TranscodeTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "TopicName": {"Ref": "TranscodeTopicName"},
                "Subscription": [
                    { "Endpoint" : { "Fn::GetAtt" : [ "ID3TagQueue", "Arn" ] }, "Protocol" : "sqs" }
                ]
            }
        },
        "TranscodeNotificationQueuePolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "transcodeNotification",
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "1",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": "*"
                            },
                            "Action": ["sqs:SendMessage"],
                            "Resource": {
                                "Fn::GetAtt": ["ID3TagQueue", "Arn"]
                            },
                            "Condition": {
                                "ArnEquals": {
                                    "aws:sourceArn": {
                                        "Ref": "TranscodeTopic"
                                    }
                                }
                            }
                        }
                    ]
                },
                "Queues": [
                    {
                        "Ref": "ID3TagQueue"
                    }
                ]
            }
        },
        "TranscoderRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [ "elastictranscoder.amazonaws.com" ]
                            },
                            "Action": [ "sts:AssumeRole" ]
                        }
                    ]
                },
                "Path": "/mediapipeline/",
                "Policies": [
                    {
                        "PolicyName": "transcoder",
                        "PolicyDocument": {
                            "Version": "2008-10-17",
                            "Statement": [
                                {"Sid":"1","Effect":"Allow","Action":["s3:ListBucket","s3:Put*","s3:Get*","s3:*MultipartUpload*"],"Resource":{"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "S3Bucket"},"*"]]}},
                                {"Sid":"2","Effect":"Allow","Action":"sns:Publish","Resource":{"Ref": "TranscodeTopic"}},
                                {"Sid":"3","Effect":"Deny","Action":["s3:*Policy*","sns:*Permission*","sns:*Delete*","s3:*Delete*","sns:*Remove*"],"Resource":"*"}
                            ]
                        }
                    }
                ]
            }
        },
        "PipelineWorkerRole":
        {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [ "ec2.amazonaws.com" ]
                            },
                            "Action": [ "sts:AssumeRole" ]
                        }
                    ]
                },
                "Path": "/mediapipeline/",
                "Policies": [
                    {
                        "PolicyName": "worker",
                        "PolicyDocument":
                        {
                            "Statement": [
                                {
                                    "Resource": {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "S3Bucket"},"*"]]},
                                    "Action": [
                                        "s3:ListBucket",
                                        "s3:Put*",
                                        "s3:Get*",
                                        "s3:*MultipartUpload*"
                                    ],
                                    "Sid": "1",
                                    "Effect": "Allow"
                                },
                                {
                                    "Resource":  {"Fn::GetAtt": ["TranscodeQueue", "Arn"]},
                                    "Action": [
                                        "sqs:ReceiveMessage",
                                        "sqs:DeleteMessage",
                                        "sqs:SendMessage",
                                        "sqs:GetQueueUrl",
                                        "sqs:ListQueues",
                                        "sqs:ChangeMessageVisibility"
                                    ],
                                    "Sid": "2",
                                    "Effect": "Allow"
                                },
                                {
                                    "Resource":  {"Fn::GetAtt": ["ID3TagQueue", "Arn"]},
                                    "Action": [
                                        "sqs:ReceiveMessage",
                                        "sqs:DeleteMessage",
                                        "sqs:SendMessage",
                                        "sqs:GetQueueUrl",
                                        "sqs:ListQueues",
                                        "sqs:ChangeMessageVisibility"
                                    ],
                                    "Sid": "3",
                                    "Effect": "Allow"
                                },
                                {
                                    "Resource": {"Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"},":",{"Ref": "AWS::AccountId"}, ":table/", {"Ref": "DDBFileTable"},"*"]]},
                                    "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:DescribeTable",
                                        "dynamodb:Query",
                                        "dynamodb:PutItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:ListTables"
                                    ],
                                    "Sid": "4",
                                    "Effect": "Allow"
                                },
                                {
                                    "Resource": {"Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"},":",{"Ref": "AWS::AccountId"}, ":table/", {"Ref": "DDBArchiveTable"},"*"]]},
                                    "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:DescribeTable",
                                        "dynamodb:Query",
                                        "dynamodb:PutItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:ListTables"
                                    ],
                                    "Sid": "5",
                                    "Effect": "Allow"
                                },
                                {
                                    "Resource": {"Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"},":",{"Ref": "AWS::AccountId"}, ":table/", {"Ref": "DDBProcessingStatsTable"},"*"]]},
                                    "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:DescribeTable",
                                        "dynamodb:Query",
                                        "dynamodb:PutItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:ListTables"
                                    ],
                                    "Sid": "6",
                                    "Effect": "Allow"
                                },
                                {
                                    "Resource": "*",
                                    "Action": [
                                        "elastictranscoder:ListPipelines",
                                        "elastictranscoder:CreateJob"
                                    ],
                                    "Sid": "7",
                                    "Effect": "Allow"
                                }
                            ],
                            "Version": "2008-10-17"
                        }
                    }
                ]
            }
        },
        "PipelineWorkerInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/mediapipeline/",
                "Roles": [{"Ref": "PipelineWorkerRole"}]
            }
        },
        "PipelineWorkerVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "Tags": [
                    {"Key": "Name", "Value": {"Ref": "AWS::StackName"}}
                ]
            }
        },
        "PipelineWorkerSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": "us-west-2b",
                "CidrBlock": "10.0.0.0/24",
                "VpcId": { "Ref": "PipelineWorkerVPC"},
                "Tags": [
                    {"Key": "Name", "Value": {"Ref": "AWS::StackName"}}
                ]
            }
        },
        "PipelineWorkerIGW": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {"Key": "Name", "Value": {"Ref": "AWS::StackName"}}
                ]
            }
        },
        "PipelineWorkerIGWAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {"Ref": "PipelineWorkerVPC"},
                "InternetGatewayId": {"Ref": "PipelineWorkerIGW"}
            }
        },
        "PipelineWorkerRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {"Ref": "PipelineWorkerVPC"},
                "Tags": [
                    {"Key": "Name", "Value": {"Ref": "AWS::StackName"}}
                ]
            }
        },
        "PipelineWorkerRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": { "Ref": "PipelineWorkerRouteTable"},
                "GatewayId": { "Ref": "PipelineWorkerIGW"},
                "DestinationCidrBlock": "0.0.0.0/0"
            }
        },
        "PipelineWorkerRouteAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {"Ref": "PipelineWorkerSubnet"},
                "RouteTableId": {"Ref": "PipelineWorkerRouteTable"}
            }
        },
        "PipelineWorkerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "Tags": [
                    {"Key": "Name", "Value": {"Ref": "AWS::StackName"}}
                ],
                "GroupDescription": {"Fn::Join": [" ", ["Pipeline Worker SG for ", {"Ref": "AWS::StackName"}]]},
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": 22,
                        "ToPort": 22,
                        "IpProtocol": "tcp"
                    }
                ],
                "VpcId": {"Ref": "PipelineWorkerVPC"}
            }
        },
        "TranscodeWorkerLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "AssociatePublicIpAddress": "true",
                "ImageId": {"Fn::FindInMap": ["RegionMap", {"Ref": "AWS::Region"}, "image"]},
                "InstanceType": "t2.micro",
                "KeyName": {"Ref": "KeyName"},
                "SecurityGroups": [{"Ref": "PipelineWorkerSecurityGroup"}],
                "BlockDeviceMappings": [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs" : { "VolumeSize" : "100", "VolumeType": "gp2" }
                    }
                ],
                "UserData": {"Fn::Base64": {"Fn::Join": ["",
                    [
                        "#!/bin/bash -ex", "\n",
                        "su - ubuntu -c \"curl -sSL https://get.rvm.io | bash -s stable\"", "\n",
                        "su - ubuntu -c \"source /home/ubuntu/.rvm/scripts/rvm\"", "\n",
                        "su - ubuntu -c \"rvm install 2.1\"", "\n",
                        "apt-get -y install git", "\n",
                        "apt-get -y install libtag1-dev", "\n",
                        "wget http://www.rarlab.com/rar/rarlinux-x64-5.1.0.tar.gz", "\n",
                        "tar xvzf rarlinux-x64-5.1.0.tar.gz", "\n",
                        "cp rar/rar /usr/bin", "\n",
                        "cp rar/unrar /usr/bin", "\n",
                        "mkdir -p /tmp/mediapipeline/archive", "\n",
                        "mkdir -p /tmp/mediapipeline/download", "\n",
                        "mkdir -p /tmp/mediapipeline/cover_art", "\n",
                        "su - ubuntu -c \"git clone https://github.com/npslater/MediaPipeline /home/ubuntu/MediaPipeline\"", "\n",
                        "su - ubuntu -c \"cd /home/ubuntu/MediaPipeline; bundle install\"", "\n",
                        "su - ubuntu =c \"cd /home/ubuntu/MediaPipeline; rake install\"", "\n",
                        "su - ubuntu -c \"mkdir -p /home/ubuntu/.mediapipeline\"", "\n",
                        {"Fn::Join": [" ", [
                                "su - ubuntu -c \"/home/ubuntu/MediaPipeline/bin/mediapipeline configure",
                                "--input-config /home/ubuntu/MediaPipeline/conf/config.yml",
                                "--output-config /home/ubuntu/.mediapipeline/config",
                                "--pipeline-name", {"Ref": "AWS::StackName"},
                                "--region", {"Ref": "AWS::Region"},
                                "--s3-bucket", {"Ref": "S3BucketName"},
                                "--file-table", {"Ref": "DDBFileTable"},
                                "--archive-table", {"Ref": "DDBArchiveTable"},
                                "--stats-table", {"Ref": "DDBProcessingStatsTable"},
                                "--transcode-queue", {"Ref": "TranscodeQueueName"},
                                "--id3tag-queue", {"Ref": "ID3TagQueueName"},
                                "--transcode-topic", {"Ref": "TranscodeTopicName"},"\""
                            ]
                        ]}
                    ]
                ]}}
            },
            "DependsOn": "PipelineWorkerIGW"
        },
        "TranscodeWorkerAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": ["us-west-2b"],
                "VPCZoneIdentifier": [{"Ref": "PipelineWorkerSubnet"}],
                "Tags": [
                    {"Key": "Name", "Value": {"Fn::Join": ["-", ["transcode-worker",{"Ref": "AWS::StackName"}]]}, "PropagateAtLaunch": "true"}
                ],
                "MaxSize":1,
                "MinSize":1,
                "LaunchConfigurationName": {"Ref": "TranscodeWorkerLaunchConfig"}
            }
        }
    },
    "Outputs": {
        "TranscodeInputBucket": {
            "Value": {"Ref": "S3Bucket"}
        },
        "TranscodeOutputBucket": {
            "Value": {"Ref": "S3Bucket"}
        },
        "TranscodeSNSTopic": {
            "Value": {"Ref": "TranscodeTopic"}
        },
        "TranscoderRole": {
            "Value": {"Fn::GetAtt" : ["TranscoderRole", "Arn"] }
        }
    }
}